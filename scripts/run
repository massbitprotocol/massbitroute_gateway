#!/bin/bash
TYPE="gateway"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
mkdir -p $SITE_ROOT
export HOME=$SITE_ROOT
bash $SITE_ROOT/cmd_server _env
source $SITE_ROOT/.env_raw

source $SITE_ROOT/scripts/base.sh
# _load_env $SITE_ROOT
cd $SITE_ROOT

GIT_PUBLIC_URL="https://github.com"

REPOS="/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|master \
/massbit/massbitroute/app/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git \
$SITE_ROOT|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_${TYPE}.git \
$SITE_ROOT/etc/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git"

diff="diff -s"

_debug() {
	timeout 60 $SITE_ROOT/scripts/debug.sh
}

_reload() {
	_debug
	$SITE_ROOT/etc/mkagent/agents/push.sh _kill
	$SITE_ROOT/cmd_server _update
}

_init() {
	source $SITE_ROOT/.env
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw

}
_install() {
	mkdir -p $SITE_ROOT/logs $SITE_ROOT/db
	_git_config
	_init
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done

	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev

	systemctl enable supervisor
	systemctl start supervisor

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	supervisorctl update
}

_update_network() {
	blockchain=$1
	network=$2
	id=$3
	blnet=${blockchain}-${network}
	_reload=0

	conf=http.d/gw-${blnet}.conf
	if [ ! -f "$conf" ]; then touch ${conf}.orig; fi

	curl -sSfL $MBRAPI/deploy/${TYPE}conf/${blnet}.conf -o ${conf}.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${conf}.new
	fi

	$diff ${conf}.orig ${conf}.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${conf}.new ${conf}.orig
		_reload=1
	fi

	conf=http.d/dapi-${blnet}.conf
	if [ ! -f ${conf}.orig ]; then touch ${conf}.orig; fi

	curl -sSfL $MBRAPI/deploy/dapiconf/${blnet}.conf -o ${conf}.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${conf}.new
	fi

	$diff ${conf}.orig ${conf}.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${conf}.new ${conf}.orig
		sed "s/__GATEWAY_ID__/$id/g" ${conf}.orig >$conf
		_reload=1
	fi

	conf=http.d/provider-${blnet}.conf
	if [ ! -f ${conf}.orig ]; then touch ${conf}.orig; fi

	curl -sSfL $MBRAPI/deploy/provider/${blnet}.conf -o ${conf}.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${conf}.new
	fi

	$diff ${conf}.orig ${conf}.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${conf}.new ${conf}.orig
		cp ${conf}.orig ${conf}
		_reload=1
	fi

	backup=$(awk '/listen unix/{sub(/listen\s+unix/,"server unix");sub(/;/," backup ;");print}' $conf)

	if [ -n "$backup" ]; then
		grep server http.d/gw-${blnet}.conf.orig >/dev/null
		if [ $? -ne 0 ]; then
			backup=$(awk '/listen unix/{sub(/listen\s+unix/,"server unix");sub(/;/,";");print}' $conf)
			cat >http.d/gw-${blnet}.conf.orig.upstream <<EOF
upstream ${blnet}.node.mbr.${DOMAIN}{
}
EOF
		else
			cp http.d/gw-${blnet}.conf.orig http.d/gw-${blnet}.conf.orig.upstream
		fi
		sed "/upstream/ a $backup" http.d/gw-${blnet}.conf.orig.upstream >http.d/gw-${blnet}.conf
		cat http.d/gw-${blnet}.conf
	fi
	# sed "s/__GATEWAY_ID__/$id/g" etc/gateway.conf >http.d/gateway.conf0
	return $_reload
}
_load_config() {
	mkdir -p http.d
	# rm -f http.d/dapi*
	is_loading=0
	id=$(cat $SITE_ROOT/vars/ID)
	blockchain=$(cat $SITE_ROOT/vars/BLOCKCHAIN)
	network=$(cat $SITE_ROOT/vars/NETWORK)

	_update_network $blockchain $network $id
	st=$?
	echo $st
	if [ $st -eq 1 ]; then
		is_loading=1
	fi

	sed "s/__GATEWAY_ID__/$id/g" etc/gateway0.conf >http.d/gateway.conf0
	sed -i "s/__BLOCKCHAIN__/$blockchain/g" http.d/gateway.conf0
	sed -i "s/__NETWORK__/$network/g" http.d/gateway.conf0
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/gateway.conf0

	sed "s/__GATEWAY_ID__/$id/g" etc/gateway9.conf >http.d/gateway.conf9
	sed -i "s/__BLOCKCHAIN__/$blockchain/g" http.d/gateway.conf9
	sed -i "s/__NETWORK__/$network/g" http.d/gateway.conf9
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/gateway.conf9
	return $is_loading
}
_monitor() {
	echo gateway >vars/TYPE
	is_reload=0
	_load_config
	is_reload=$?

	_update_sources $REPOS
	if [ $is_reload -eq 0 ]; then
		is_reload=$?
	fi

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi

}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
