#!/bin/bash
TYPE="gateway"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
MBR=$SITE_ROOT/mbr
mkdir -p $SITE_ROOT
export DEBIAN_FRONTEND=noninteractive
export HOME=$SITE_ROOT
curl="/usr/bin/curl -skSfL"
if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw >/dev/null; fi

source $SITE_ROOT/scripts/base.sh >/dev/null
cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

log_install=$SITE_ROOT/logs/install.log
debug_log=$SITE_ROOT/logs/debug.log

export GIT_PUBLIC_URL="https://github.com"

if [ -f "$SITE_ROOT/vars/USER_ID" ]; then
	user_id=$(cat $SITE_ROOT/vars/USER_ID)
else
	user_id=1
fi

_repo() {
	if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi

	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV not defined"
		exit 1
	else
		if [ -f "$SITE_ROOT/.env.$MBR_ENV" ]; then source $SITE_ROOT/.env.$MBR_ENV >/dev/null; fi
	fi
	REPOS="$mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git \
$SITE_ROOT|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_${TYPE}.git \
$service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MBR_ENV"
}

_repo

diff="diff -s"

_debug() {
	timeout 30 $SITE_ROOT/scripts/debug.sh
}

_maintain() {
	rm $SITE_ROOT/logs/*M
	truncate -s 0 $SITE_ROOT/logs/*
	truncate -s 0 $SITE_ROOT/logs/access/*
	truncate -s 0 $SITE_ROOT/logs/nginx/*
	truncate -s 0 /var/log/atop/*
	bash $SITE_ROOT/mbr node nodeinfo
	# rm /tmp/test_speed_* /tmp/check_speed
	# _debug
}

_tune() {
	if [ "$MBR_MODE" != "docker" ]; then
		echo 2000000 >/proc/sys/fs/nr_open
		echo 2000000 >/proc/sys/fs/file-max
		ulimit -n 2000000
		cp /massbit/massbitroute/app/gbc/conf/limits.conf /etc/security/limits.d/mbr.conf
		cp /massbit/massbitroute/app/gbc/conf/sysctl.conf /etc/sysctl.d/99-mbr.conf
		sysctl -p
	fi
	cat >/etc/logrotate.d/massbit <<EOF
$SITE_ROOT/logs/access/*.log
$SITE_ROOT/logs/nginx/*.log
$SITE_ROOT/logs/*.log {
       daily
       rotate 1
       delaycompress
       compress
       notifempty
       missingok
       sharedscripts
        postrotate
                [ -f $SITE_ROOT/tmp/nginx.pid ] && kill -USR1 \$(cat $SITE_ROOT/tmp/nginx.pid)
        endscript
}
EOF
}

_add_host_file() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	if [ ! -f "/etc/hosts.bk" ]; then
		sed '/.mbr/d' /etc/hosts >/etc/hosts.bk
	fi
	sed '/</d' /etc/hosts -i /etc/hosts.bk
	cat /etc/hosts.bk >/tmp/hosts
	$curl $PORTAL_URL/deploy/info/hosts -o /tmp/hosts.1
	if [ -f "/tmp/hosts.1" ]; then
		cat /tmp/hosts.1 >>/tmp/hosts
		cat /tmp/hosts >/etc/hosts
		rm /tmp/hosts.1
	fi
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	# apt-get update
	# apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev
	if [ -f "/usr/bin/systemctl" ]; then
		systemctl enable supervisor
		systemctl start supervisor
	fi

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}
_install() {
	_init >>$log_install
	_prepare >>$log_install
	_install_repos >>$log_install
	_supervisor >>$log_install
}

_load_config() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	mkdir -p $SITE_ROOT/http.d
	# $SITE_ROOT/mbr node nodeinfo
	is_reloading=0
	id=$(cat $SITE_ROOT/vars/ID)
	if [ -z "$id" ]; then return $is_reloading; fi

	echo $curl $PORTAL_URL/deploy/${TYPE}conf/${id}.conf -o http.d/${id}.conf.new >/dev/null
	$curl $PORTAL_URL/deploy/${TYPE}conf/${id}.conf -o http.d/${id}.conf.new >/dev/null
	if [ ! -f "http.d/${id}.conf" ]; then
		touch http.d/${id}.conf
	fi

	diff -s http.d/${id}.conf http.d/${id}.conf.new
	if [ $? -ne 0 ]; then
		mv http.d/${id}.conf.new http.d/${id}.conf
		is_reloading=1
	fi
	sed "s/__NODE_ID__/$id/g" etc/node.conf >http.d/node.conf0
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/node.conf0

	$SITE_ROOT/cmd_server start all
	return $is_reloading
}
_add_host_file() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	if [ ! -f "/etc/hosts.bk" ]; then
		sed '/.mbr/d' /etc/hosts >/etc/hosts.bk
	fi
	sed '/</d' /etc/hosts -i /etc/hosts.bk
	cat /etc/hosts.bk >/tmp/hosts
	$curl $PORTAL_URL/deploy/info/hosts -o /tmp/hosts.1
	if [ -f "/tmp/hosts.1" ]; then
		cat /tmp/hosts.1 >>/tmp/hosts
		cat /tmp/hosts >/etc/hosts
		rm /tmp/hosts.1
	fi
}

_reload() {

	mkdir -p $SITE_ROOT/data/geoip
	if [ ! -f "$SITE_ROOT/data/geoip/GeoIP2-City.mmdb" ]; then
		# apt update
		# apt-get install -y xz-utils
		tar -xvJf $SITE_ROOT/data/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/data/geoip
	fi

	_maintain

	id=$(cat $SITE_ROOT/vars/ID)
	# _sc=$(mktemp)
	# curl -sk $PORTAL_URL/deploy/info/debug/$TYPE/${id} -o $_sc >/dev/null
	# if [ $? -eq 0 ]; then
	# 	echo "Script path:$_sc" | tee -a $debug_log
	# 	bash $_sc $SITE_ROOT | tee -a $debug_log
	# fi

	# rm $_sc
	# _add_host_file
	if [ ! -L "/etc/letsencrypt" ]; then
		rm -rf /etc/letsencrypt
		ln -sf /massbit/massbitroute/app/src/sites/services/gateway/ssl /etc/letsencrypt
	fi

	_tune

	if [ -f "/usr/bin/systemctl" ]; then
		systemctl | awk '/apt/{print $1}' | while read _s; do
			systemctl stop $_s
			systemctl disable $_s
		done
	fi
	pkill -f push.py
	pkill -f push.sh
	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all

	chmod +x $SITE_ROOT/bin/openresty/nginx/sbin/nginx
	nginx="$SITE_ROOT/bin/openresty/nginx/sbin/nginx -c $SITE_ROOT/tmp/nginx.conf"
	msg="$($nginx -t 2>&1 | tr -s '\n' ' ')"

	st=$?
	echo $st nginx_check - "$msg" >/tmp/nginx_check

	grep "The MaxMind DB file contains invalid metadata" /tmp/nginx_check >/dev/null
	if [ $? -eq 0 ]; then
		rm $SITE_ROOT/data/geoip/GeoIP2-City.mmdb
		tar -xvJf $SITE_ROOT/data/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/data/geoip
		msg="$($nginx -t 2>&1 | tr -s '\n' ' ')"

		st=$?
		echo $st nginx_check - "$msg" >/tmp/nginx_check

	fi

	#_debug
}

_init() {
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
}

_prepare() {
	echo "Prepare"

	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/logs/access $SITE_ROOT/logs/error $SITE_ROOT/db $SITE_ROOT/cache $SITE_ROOT/cache_gateway $SITE_ROOT/tmp $SITE_ROOT/http.d
	# rm -rf $SITE_ROOT/tmp/*

	if [ ! -f "$SITE_ROOT/data/geoip/GeoIP2-City.mmdb" ]; then
		# apt update
		# apt-get install -y xz-utils
		tar -xvJf $SITE_ROOT/data/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/data/geoip
	fi

}
_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}

_install() {
	_init >>$log_install
	_prepare >>$log_install
	_install_repos >>$log_install
	_supervisor >>$log_install
}

_optimize_upstream_file() {
	_fstream=$1
	_node_monitor=$2
	_node_scores1=$3
	if [ ! -f "$_fstream" ]; then return; fi
	_node_ids=$(mktemp)
	if [ -z "$_node_scores1" ]; then
		_node_scores=$(mktemp)
	else
		_node_scores=$_node_scores1
	fi
	awk '{gsub(/unix:\/tmp\//,"",$2);gsub(/.sock/,"",$2);print $2;}' $_fstream | sort >$_node_ids
	cat $_node_ids
	cat $_node_monitor
	cat $_node_scores
	join -j 1 -o 1.1,2.2 $_node_ids $_node_monitor | sort -k2 -nr >$_node_scores
	cat $_node_scores
	echo >>$_node_scores
	_n=$(awk 'NF > 0' $_node_scores | wc -l)
	if [ $_n -gt 0 ]; then
		cp $_fstream ${_fstream}.bk
		awk 'NF > 0 {printf "server unix:/tmp/%s.sock max_fails=1 fail_timeout=3s weight=%s;\n",$1, $2}' $_node_scores >$_fstream
		cat $_fstream
	fi
	cat $_fstream
	if [ ! -f "$_fstream" ]; then touch $_fstream; fi
	if [ -z "$_node_scores1" ]; then
		rm $_node_scores
	fi
	rm $_node_ids
}
_optimize_upstream_geo() {
	_node_scores=$1
	_geo=$2
	_upstream_country=$(mktemp)
	_upstream_continent=$(mktemp)
	_upstream_other=$(mktemp)
	awk 'NF > 0 && $2 > 100000{printf "server unix:/tmp/%s.sock max_fails=1 fail_timeout=3s weight=%s;\n",$1, $2}' $_node_scores >$_upstream_country
	awk 'NF > 0 && $2 <= 100000 && $2 > 10000{printf "server unix:/tmp/%s.sock max_fails=1 fail_timeout=3s weight=%s;\n",$1, $2}' $_node_scores >$_upstream_continent
	awk 'NF > 0 && $2 <= 10000{printf "server unix:/tmp/%s.sock max_fails=1 fail_timeout=3s weight=%s;\n",$1, $2}' $_node_scores >$_upstream_other

	_upstream_country_n=$(wc -l $_upstream_country | cut -d' ' -f1)
	_upstream_continent_n=$(wc -l $_upstream_continent | cut -d' ' -f1)
	_upstream_other_n=$(wc -l $_upstream_other | cut -d' ' -f1)

	if [ $_upstream_country_n -ge 1 ]; then
		_fn=http.d/${_geo}.upstream
		if [ -f "$_fn" ]; then
			cp $_fn ${_fn}.bk1
			cp $_upstream_country $_fn
		fi
	fi

	if [ $_upstream_continent_n -ge 1 ]; then
		_fn=http.d/${_geo}-v1-v2.upstream
		if [ -f "$_fn" ]; then
			cp $_fn ${_fn}.bk1
			cp $_upstream_continent $_fn
		fi
	fi
	if [ $_upstream_other_n -ge 1 ]; then
		_fn=http.d/${_geo}-v1.upstream
		if [ -f "$_fn" ]; then
			cp $_fn ${_fn}.bk1
			cp $_upstream_other $_fn
		fi
	fi

	echo "Upstream country"
	cat $_upstream_country

	echo "Upstream continent"
	cat $_upstream_continent

	echo "Upstream other"
	cat $_upstream_other

	rm $_upstream_continent $_upstream_country $_upstream_other

}
_optimize_upstream() {
	blockchain=$1
	network=$2
	id=$3
	continent=$4
	country=$5
	_reload=0
	if [ -z "$continent" ]; then return $_reload; fi
	if [ -z "$country" ]; then return $_reload; fi
	if [ -z "$blockchain" ]; then return $_reload; fi
	if [ -z "$network" ]; then return $_reload; fi
	if [ -z "$id" ]; then return $_reload; fi

	node_monitor=$SITE_ROOT/logs/node_monitor
	node_scores=$SITE_ROOT/logs/node_scores
	_tmp1=$(mktemp)
	echo $curl https://${TYPE}-${blockchain}-${network}.monitor.mbr.${DOMAIN}/_stat/$TYPE/$blockchain/$network/$id/mbr-node -o $_tmp1
	timeout 30 $curl https://${TYPE}-${blockchain}-${network}.monitor.mbr.${DOMAIN}/_stat/$TYPE/$blockchain/$network/$id/mbr-node -o $_tmp1 >/dev/null
	if [ $? -ne 0 ]; then return $_reload; fi
	cat $_tmp1 | sort -k1 >$node_monitor
	rm $_tmp1
	if [ $? -ne 0 ]; then return; fi
	_tmp="$(cat $node_monitor)"
	if [ -z "$_tmp" ]; then return; fi
	_geo=${blockchain}-${network}-${continent}-${country}
	_optimize_upstream_file http.d/${blockchain}-${network}.upstream $node_monitor $node_scores
	_optimize_upstream_file http.d/${blockchain}-${network}-${continent}.upstream $node_monitor
	_optimize_upstream_file http.d/${_geo}.upstream $node_monitor
	_optimize_upstream_file http.d/${_geo}-v1.upstream $node_monitor
	_optimize_upstream_file http.d/${_geo}-v1-v2.upstream $node_monitor

	_optimize_upstream_geo $node_scores $_geo
	return $_reload
}
_update_network() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	blockchain=$1
	network=$2
	id=$3
	continent=$4
	country=$5
	_reload=0
	if [ -z "$continent" ]; then return $_reload; fi
	if [ -z "$country" ]; then return $_reload; fi
	if [ -z "$blockchain" ]; then return $_reload; fi
	if [ -z "$network" ]; then return $_reload; fi
	if [ -z "$id" ]; then return $_reload; fi
	blnet=${blockchain}-${network}
	geo=${continent}-${country}

	conf=http.d/gw-${blnet}

	# rm http.d/upstreams-*.conf1
	>${conf}-upstreams.conf.bk
	for _f in $blnet ${blnet}-${continent} ${blnet}-${geo}-v1 ${blnet}-${geo}-v1-v2 ${blnet}-${geo}; do
		_fn=${_f}.upstream
		echo $curl $PORTAL_URL/deploy/${TYPE}conf/${_fn} -o http.d/${_fn}.new
		timeout 30 $curl $PORTAL_URL/deploy/${TYPE}conf/${_fn} -o http.d/${_fn}.new >/dev/null
		if [ ! -f "http.d/${_fn}.new" ]; then touch http.d/${_fn}.new; fi
		if [ ! -f "http.d/${_fn}.old" ]; then touch http.d/${_fn}.old; fi
		$diff http.d/${_fn}.new http.d/${_fn}.old >/dev/null
		if [ $? -ne 0 ]; then
			cp http.d/${_fn}.new http.d/${_fn}.old
			cp http.d/${_fn}.new http.d/${_fn}
			_reload=1
		else
			cp http.d/${_fn}.new http.d/${_fn}
		fi
		if [ ! -f "http.d/${_fn}" ]; then touch http.d/${_fn}; fi

		_nstream=$(wc -l http.d/${_fn} | cut -d' ' -f1)
		_fn=ws-${_f}.upstream
		echo $curl $PORTAL_URL/deploy/${TYPE}conf/${_fn} -o http.d/${_fn}.new
		timeout 30 $curl $PORTAL_URL/deploy/${TYPE}conf/${_fn} -o http.d/${_fn}.new >/dev/null
		if [ ! -f "http.d/${_fn}.new" ]; then touch http.d/${_fn}.new; fi
		if [ ! -f "http.d/${_fn}.old" ]; then touch http.d/${_fn}.old; fi
		$diff http.d/${_fn}.new http.d/${_fn}.old >/dev/null
		if [ $? -ne 0 ]; then
			cp http.d/${_fn}.new http.d/${_fn}.old
			cp http.d/${_fn}.new http.d/${_fn}
			_reload=1
		else
			cp http.d/${_fn}.new http.d/${_fn}
		fi
		if [ ! -f "http.d/${_fn}" ]; then touch http.d/${_fn}; fi

		_fn=upstreams-${_f}.conf1
		echo $curl $PORTAL_URL/deploy/${TYPE}conf/${_fn} -o http.d/${_fn}.new
		timeout 30 $curl $PORTAL_URL/deploy/${TYPE}conf/${_fn} -o http.d/${_fn}.new >/dev/null
		if [ ! -f "http.d/${_fn}.new" ]; then touch http.d/${_fn}.new; fi
		if [ ! -f "http.d/${_fn}.old" ]; then touch http.d/${_fn}.old; fi
		$diff http.d/${_fn}.new http.d/${_fn}.old >/dev/null
		if [ $? -ne 0 ]; then
			if [ $_nstream -eq 0 ]; then
				sed 's/backup;/;/g' http.d/${_fn}.new -i
			fi
			cp http.d/${_fn}.new http.d/${_fn}.old
			cp http.d/${_fn}.new http.d/${_fn}
			_reload=1
		else
			cp http.d/${_fn}.new http.d/${_fn}
		fi
		if [ ! -f "http.d/${_fn}" ]; then touch http.d/${_fn}; fi

		if [ $_nstream -eq 0 ]; then
			sed 's/backup;/;/g' http.d/${_fn}.new -i
		fi

		cat http.d/${_fn}.new >>${conf}-upstreams.conf.bk
		echo >>${conf}-upstreams.conf.bk
	done
	mv ${conf}-upstreams.conf.bk ${conf}-upstreams.conf

	echo $curl $PORTAL_URL/deploy/${TYPE}conf/${blnet}-nodes.conf -o ${conf}-nodes.new
	$curl $PORTAL_URL/deploy/${TYPE}conf/${blnet}-nodes.conf -o ${conf}-nodes.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${conf}-nodes.new
	fi

	if [ ! -f "${conf}-nodes.conf" ]; then touch ${conf}-nodes.orig; fi
	$diff ${conf}-nodes.orig ${conf}-nodes.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${conf}-nodes.new ${conf}-nodes.orig
		cp ${conf}-nodes.new ${conf}-nodes.conf
		_reload=1
	else
		cp ${conf}-nodes.new ${conf}-nodes.conf
	fi

	dapiconf=http.d/dapi-${blnet}.conf
	if [ ! -f ${dapiconf}.orig ]; then touch ${dapiconf}.orig; fi

	echo $curl $PORTAL_URL/deploy/dapiconf/${blnet}.conf -o ${dapiconf}.new
	$curl $PORTAL_URL/deploy/dapiconf/${blnet}.conf -o ${dapiconf}.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${dapiconf}.new
	fi

	$diff ${dapiconf}.orig ${dapiconf}.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${dapiconf}.new ${dapiconf}.orig

		_reload=1
	fi
	sed "s/__GATEWAY_ID__/$id/g" ${dapiconf}.new >$dapiconf
	sed "s/__GATEWAY_USER_ID__/$user_id/g" -i $dapiconf
	_l0="${blockchain}-${network}\\."

	if [ \( -n "$continent" \) -a \( -n "$country" \) ]; then
		_l="${blockchain}-${network}-${continent}-${country}\\."
		grep $_l ${conf}-upstreams.conf >/dev/null
		if [ $? -eq 0 ]; then
			sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $dapiconf
			sed "s/proxy_pass http\:\/\/ws-${_l0}node\.mbr/proxy_pass http\:\/\/ws-${_l}node\.mbr/g" -i $dapiconf
		else
			_l="${blockchain}-${network}-${continent}-${country}-v1-v2\\."
			grep $_l ${conf}-upstreams.conf >/dev/null
			if [ $? -eq 0 ]; then
				sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $dapiconf
				sed "s/proxy_pass http\:\/\/ws-${_l0}node\.mbr/proxy_pass http\:\/\/ws-${_l}node\.mbr/g" -i $dapiconf
			else
				_l="${blockchain}-${network}-${continent}\\."
				grep $_l ${conf}-upstreams.conf >/dev/null
				if [ $? -eq 0 ]; then
					sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $dapiconf
					sed "s/proxy_pass http\:\/\/ws-${_l0}node\.mbr/proxy_pass http\:\/\/ws-${_l}node\.mbr/g" -i $dapiconf
				fi
			fi

		fi

	fi

	return $_reload
}
_load_config() {
	if [ ! -f "$SITE_ROOT/vars/RAW" ]; then
		$SITE_ROOT/mbr node nodeinfo
	fi

	if [ ! -f "$SITE_ROOT/vars/RAW" ]; then
		return
	fi

	is_loading=0
	id=$(cat $SITE_ROOT/vars/ID)

	if [ -z "$id" ]; then return $is_loading; fi

	blockchain=$(cat $SITE_ROOT/vars/BLOCKCHAIN)
	if [ -z "$blockchain" ]; then return $is_loading; fi

	network=$(cat $SITE_ROOT/vars/NETWORK)
	if [ -z "$network" ]; then return $is_loading; fi

	continent=$(cat $SITE_ROOT/vars/RAW | jq .geo.continentCode | sed 's/"//g')
	country=$(cat $SITE_ROOT/vars/RAW | jq .geo.countryCode | sed 's/"//g')

	if [ \( -z "$continent" \) -o \( "$continent" == "null" \) ]; then
		continent=""
		$SITE_ROOT/mbr node nodeinfo
		continent=$(cat $SITE_ROOT/vars/RAW | jq .geo.continentCode | sed 's/"//g')
		country=$(cat $SITE_ROOT/vars/RAW | jq .geo.countryCode | sed 's/"//g')

	fi
	if [ \( -z "$country" \) -o \( "$country" == "null" \) ]; then
		country=""
		$SITE_ROOT/mbr node nodeinfo
		continent=$(cat $SITE_ROOT/vars/RAW | jq .geo.continentCode | sed 's/"//g')
		country=$(cat $SITE_ROOT/vars/RAW | jq .geo.countryCode | sed 's/"//g')
	fi

	_update_network $blockchain $network $id $continent $country
	_st1=$?
	if [ $_st1 -ne 0 ]; then
		is_loading=$_st1
	fi

	_optimize_upstream $blockchain $network $id $continent $country

	sed "s/__GATEWAY_ID__/$id/g" etc/gateway0.conf >http.d/gateway.conf0
	sed "s/__GATEWAY_USER_ID__/$user_id/g" -i http.d/gateway.conf0
	sed -i "s/__BLOCKCHAIN__/$blockchain/g" http.d/gateway.conf0
	sed -i "s/__NETWORK__/$network/g" http.d/gateway.conf0
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/gateway.conf0

	sed "s/__GATEWAY_ID__/$id/g" etc/gateway9.conf >http.d/gateway.conf9
	sed "s/__GATEWAY_USER_ID__/$user_id/g" -i http.d/gateway.conf9
	sed -i "s/__BLOCKCHAIN__/$blockchain/g" http.d/gateway.conf9
	sed -i "s/__NETWORK__/$network/g" http.d/gateway.conf9
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/gateway.conf9

	blnet=${blockchain}-${network}
	conf=http.d/gw-${blnet}

	_l0="${blockchain}-${network}\\."
	_conf1=http.d/gateway.conf9
	if [ \( -n "$continent" \) -a \( -n "$country" \) ]; then
		_l="${blockchain}-${network}-${continent}-${country}\\."
		grep $_l ${conf}-upstreams.conf >/dev/null
		if [ $? -eq 0 ]; then
			sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $_conf1
			sed "s/proxy_pass http\:\/\/ws-${_l0}node\.mbr/proxy_pass http\:\/\/ws-${_l}node\.mbr/g" -i $_conf1
		else
			_l="${blockchain}-${network}-${continent}-${country}-v1-v2\\."
			grep $_l ${conf}-upstreams.conf >/dev/null
			if [ $? -eq 0 ]; then
				sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $_conf1
				sed "s/proxy_pass http\:\/\/ws-${_l0}node\.mbr/proxy_pass http\:\/\/ws-${_l}node\.mbr/g" -i $_conf1
			else
				_l="${blockchain}-${network}-${continent}\\."
				grep $_l ${conf}-upstreams.conf >/dev/null
				if [ $? -eq 0 ]; then
					sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $_conf1
					sed "s/proxy_pass http\:\/\/ws-${_l0}node\.mbr/proxy_pass http\:\/\/ws-${_l}node\.mbr/g" -i $_conf1
				fi
			fi

		fi

		# sed "s/proxy_pass http\:\/\/${blockchain}-${network}\.node\.mbr/proxy_pass http\:\/\/${blockchain}-${network}-${continent}-${country}\.node\.mbr/g" -i http.d/gateway.conf9
	fi

	$SITE_ROOT/cmd_server nginx -t
	$SITE_ROOT/cmd_server start all
	return $is_loading
}

_update_repos() {
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_register_node() {
	SCRIPTS_RUN="$SITE_ROOT/scripts/run"
	MBR=$SITE_ROOT/mbr
	rm -f $SITE_ROOT/http.d/*

	$MBR node register

	supervisorctl status

	$SCRIPTS_RUN _load_config
	$SITE_ROOT/cmd_server _update

	$SITE_ROOT/cmd_server status

	res=$($MBR node nodeverify)
	status=$(echo $res | jq ".status" | sed -z "s/\"//g;")
	while [ "$status" != "verified" ]; do
		git -C $SITE_ROOT pull origin $MBR_ENV
		message=$(echo $res | jq ".message")
		if [ "$message" != "null" ]; then
			echo "Verifying with message: $message"
		fi
		sleep 10
		$SCRIPTS_RUN _load_config
		$SITE_ROOT/cmd_server _update
		res=$($MBR node nodeverify)
		status=$(echo $res | jq ".status" | sed -z "s/\"//g;")
	done

	if [ "$status" = "verified" ]; then
		echo "Node installed successfully !"
	fi
}
_update_docker() {
	if [ -n "$INSTALL_CMD" ]; then
		tmp=$(mktemp)
		echo "$INSTALL_CMD" | cut -d'?' -f2 | tr -s '&' '\n' | awk -F'=' '{print "export",toupper($1)"="$2}' >$tmp
		echo >>$tmp
		source $tmp
		rm $tmp

	fi

	if [ -n "$MBR_ENV" ]; then
		$MBR node set MBR_ENV "$MBR_ENV"
	fi

	$MBR node nodeinfo

	if [ -n "$ZONE" ]; then $MBR node set ZONE "$ZONE"; fi
	if [ -n "$ID" ]; then $MBR node set ID "$ID"; fi
	if [ -n "$USER_ID" ]; then $MBR node set USER_ID "$USER_ID"; fi
	if [ -n "$IP" ]; then $MBR node set IP "$IP"; fi
	if [ -n "$BLOCKCHAIN" ]; then $MBR node set BLOCKCHAIN "$BLOCKCHAIN"; fi
	if [ -n "$NETWORK" ]; then $MBR node set NETWORK "$NETWORK"; fi
	if [ -n "$APP_KEY" ]; then $MBR node set APP_KEY "$APP_KEY"; fi
	if [ -n "$SITE_ROOT" ]; then $MBR node set SITE_ROOT "$SITE_ROOT"; fi
	if [ -n "$PORTAL_URL" ]; then $MBR node set PORTAL_URL "$PORTAL_URL"; fi
	if [ ! -f "$SITE_ROOT/logs/install.done" ]; then
		$MBR node geo
		_register_node
		touch $SITE_ROOT/logs/install.done
	fi
}

_update() {

	echo "Update"
	echo $TYPE >$SITE_ROOT/vars/TYPE
	mkdir -p $SITE_ROOT/logs/access $SITE_ROOT/logs/error

	_repo

	if [ -n "$MBR_ENV" ]; then
		cat >$SITE_ROOT/.env <<EOF
export GIT_PUBLIC_URL="https://github.com"
export MBR_ENV=${MBR_ENV}
EOF
		cp $SITE_ROOT/.env $SITE_ROOT/.env_raw
	fi

	if [ ! -f "$SITE_ROOT/data/geoip/GeoIP2-City.mmdb" ]; then
		tar -xvJf $SITE_ROOT/data/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/data/geoip
	fi
	if [ "$MBR_MODE" == "docker" ]; then
		_update_docker 2>&1 >>$log_install
	fi

	_st_update=0

	_update_repos
	_st_update=$?

	_load_config

	_st=$?

	if [ $_st_update -eq 0 ]; then
		_st_update=$_st
	fi

	return $_st_update
}

_monitor() {

	_update
	_st_monitor=$?
	if [ $_st_monitor -ne 0 ]; then
		$0 _reload
	fi

	# cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	# supervisorctl update
	echo $(date +%s) >/tmp/mbr_monitor_updated

	# $curl $PORTAL_URL/deploy/version/apideploy.version -o /tmp/version.new
	# if [ $? -eq 0 ]; then
	# 	if [ ! -f "/tmp/version.old" ]; then touch /tmp/version.old; fi
	# 	diff -s /tmp/version.new /tmp/version.old
	# 	if [ $? -eq 0 ]; then
	# 		echo $0 _reload
	# 	fi
	# 	mv /tmp/version.new /tmp/version.old
	# fi
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
