#!/bin/bash
TYPE="gateway"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
mkdir -p $SITE_ROOT
export HOME=$SITE_ROOT
if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi

source $SITE_ROOT/scripts/base.sh
# _load_env $SITE_ROOT
cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

GIT_PUBLIC_URL="https://github.com"
export MBR_ENV=${MBR_ENV:-dev}

_repo() {
	REPOS="$mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git \
$SITE_ROOT|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_${TYPE}.git \
$service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MBR_ENV"
}

_repo

diff="diff -s"

_debug() {
	timeout 10 $SITE_ROOT/scripts/debug.sh
}

_tune() {
	echo 2000000 >/proc/sys/fs/nr_open
	echo 2000000 >/proc/sys/fs/file-max
	ulimit -n 2000000
	cp /massbit/massbitroute/app/gbc/conf/limits.conf /etc/security/limits.d/mbr.conf
	cp /massbit/massbitroute/app/gbc/conf/sysctl.conf /etc/sysctl.d/99-mbr.conf
	sysctl -p
	cat >/etc/logrotate.d/massbit <<EOF
$SITE_ROOT/logs/access/*.log
$SITE_ROOT/logs/nginx/*.log
$SITE_ROOT/logs/*.log {
       daily
       rotate 1
       delaycompress
       compress
       notifempty
       missingok
       sharedscripts
        postrotate
                [ -f $SITE_ROOT/tmp/nginx.pid ] && kill -USR1 \$(cat $SITE_ROOT/tmp/nginx.pid)
        endscript
}
EOF
}

_add_host_file() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	if [ ! -f "/etc/hosts.bk" ]; then
		sed '/.mbr/d' /etc/hosts >/etc/hosts.bk
	fi
	sed '/</d' /etc/hosts -i /etc/hosts.bk
	cat /etc/hosts.bk >/tmp/hosts
	curl -s $PORTAL_URL/deploy/info/hosts -o /tmp/hosts.1
	if [ -f "/tmp/hosts.1" ]; then
		cat /tmp/hosts.1 >>/tmp/hosts
		cat /tmp/hosts >/etc/hosts
		rm /tmp/hosts.1
	fi
}

_reload() {
	rm /tmp/test_speed_* /tmp/check_speed
	_add_host_file
	if [ ! -L "/etc/letsencrypt" ]; then
		rm -rf /etc/letsencrypt
		ln -sf /massbit/massbitroute/app/src/sites/services/gateway/ssl /etc/letsencrypt
	fi

	_tune
	if [ -f "/etc/logrotate.d/massbit" ]; then
		logrotate -vf /etc/logrotate.d/massbit
	fi
	systemctl | awk '/apt/{print $1}' | while read _s; do
		systemctl stop $_s
		systemctl disable $_s
	done
	pkill -f push.py
	pkill -f push.sh
	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all
	_debug
}

_init() {

	if [ ! -f "$SITE_ROOT/.env" ]; then
		echo "$MBR_ENV" >$SITE_ROOT/.env
	fi

	source $SITE_ROOT/.env

	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc

	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw
	_repo
}

_prepare() {
	echo "Prepare"

	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/logs/access $SITE_ROOT/logs/error $SITE_ROOT/db $SITE_ROOT/cache $SITE_ROOT/cache_gateway $SITE_ROOT/tmp $SITE_ROOT/http.d
	# rm -rf $SITE_ROOT/tmp/*

}
_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev

	systemctl enable supervisor
	systemctl start supervisor

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	supervisorctl update
}
_install() {
	_init
	_prepare
	_install_repos
	_supervisor
}

_update_network() {
	PORTAL_URL=$(cat $SITE_ROOT/vars/PORTAL_URL)
	blockchain=$1
	network=$2
	id=$3
	continent=$4
	country=$5
	_reload=0
	if [ -z "$blockchain" ]; then return $_reload; fi
	if [ -z "$network" ]; then return $_reload; fi
	if [ -z "$id" ]; then return $_reload; fi
	blnet=${blockchain}-${network}

	conf=http.d/gw-${blnet}
	# if [ ! -f "$conf" ]; then touch ${conf}.orig; fi

	# curl -sSfL $MBRAPI/deploy/${TYPE}conf/${blnet}.conf -o ${conf}.new >/dev/null
	# if [ $? -ne 0 ]; then
	# 	touch ${conf}.new
	# fi

	# $diff ${conf}.orig ${conf}.new >/dev/null
	# if [ $? -ne 0 ]; then
	# 	cp ${conf}.new ${conf}.orig
	# 	_reload=1
	# fi

	curl -sSfL $PORTAL_URL/deploy/${TYPE}conf/${blnet}-nodes.conf -o ${conf}-nodes.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${conf}-nodes.new
	fi

	if [ ! -f "${conf}-nodes.conf" ]; then touch ${conf}-nodes.orig; fi
	$diff ${conf}-nodes.orig ${conf}-nodes.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${conf}-nodes.new ${conf}-nodes.orig
		cp ${conf}-nodes.new ${conf}-nodes.conf
		_reload=1
	fi

	curl -sSfL $PORTAL_URL/deploy/${TYPE}conf/${blnet}-upstreams.conf -o ${conf}-upstreams.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${conf}-upstreams.new
	fi
	if [ ! -f "${conf}-upstreams.conf" ]; then touch ${conf}-upstreams.orig; fi
	$diff ${conf}-upstreams.orig ${conf}-upstreams.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${conf}-upstreams.new ${conf}-upstreams.orig
		cp ${conf}-upstreams.new ${conf}-upstreams.conf
		_reload=1
	fi

	dapiconf=http.d/dapi-${blnet}.conf
	if [ ! -f ${dapiconf}.orig ]; then touch ${dapiconf}.orig; fi

	curl -sSfL $PORTAL_URL/deploy/dapiconf/${blnet}.conf -o ${dapiconf}.new >/dev/null
	if [ $? -ne 0 ]; then
		touch ${dapiconf}.new
	fi

	$diff ${dapiconf}.orig ${dapiconf}.new >/dev/null
	if [ $? -ne 0 ]; then
		cp ${dapiconf}.new ${dapiconf}.orig

		_reload=1
	fi
	sed "s/__GATEWAY_ID__/$id/g" ${dapiconf}.new >$dapiconf
	_l0="${blockchain}-${network}\\."

	if [ \( -n "$continent" \) -a \( -n "$country" \) ]; then
		_l="${blockchain}-${network}-${continent}-${country}\\."
		grep $_l ${conf}-upstreams.conf >/dev/null
		if [ $? -eq 0 ]; then
			sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $dapiconf
		else
			_l="${blockchain}-${network}-${continent}-${country}-v1-v2\\."
			grep $_l ${conf}-upstreams.conf >/dev/null
			if [ $? -eq 0 ]; then
				sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $dapiconf
			else
				_l="${blockchain}-${network}-${continent}\\."
				grep $_l ${conf}-upstreams.conf >/dev/null
				if [ $? -eq 0 ]; then
					sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $dapiconf
				fi
			fi

		fi

	fi
	# 	conf=http.d/provider-${blnet}.conf
	# 	if [ ! -f ${conf}.orig ]; then touch ${conf}.orig; fi

	# 	curl -sSfL $MBRAPI/deploy/provider/${blnet}.conf -o ${conf}.new >/dev/null
	# 	if [ $? -ne 0 ]; then
	# 		touch ${conf}.new
	# 	fi

	# 	$diff ${conf}.orig ${conf}.new >/dev/null
	# 	if [ $? -ne 0 ]; then
	# 		cp ${conf}.new ${conf}.orig
	# 		cp ${conf}.orig ${conf}
	# 		_reload=1
	# 	fi

	# 	backup=$(awk '/listen unix/{sub(/listen\s+unix/,"server unix");sub(/;/," backup ;");print}' $conf)

	# 	if [ -n "$backup" ]; then
	# 		grep server http.d/gw-${blnet}.conf.orig >/dev/null
	# 		if [ $? -ne 0 ]; then
	# 			backup=$(awk '/listen unix/{sub(/listen\s+unix/,"server unix");sub(/;/,";");print}' $conf)
	# 			cat >http.d/gw-${blnet}.conf.orig.upstream <<EOF
	# upstream ${blnet}.node.mbr.${DOMAIN}{
	# }
	# EOF
	# 		else
	# 			cp http.d/gw-${blnet}.conf.orig http.d/gw-${blnet}.conf.orig.upstream
	# 		fi
	# 		sed "/upstream/ a $backup" http.d/gw-${blnet}.conf.orig.upstream >http.d/gw-${blnet}.conf
	# 		cat http.d/gw-${blnet}.conf
	# 	fi
	# sed "s/__GATEWAY_ID__/$id/g" etc/gateway.conf >http.d/gateway.conf0
	return $_reload
}
_load_config() {

	# mkdir -p http.d
	# rm http.d/*
	# $SITE_ROOT/mbr node nodeinfo
	# rm -f http.d/dapi*
	is_loading=0
	id=$(cat $SITE_ROOT/vars/ID)
	if [ -z "$id" ]; then return $is_loading; fi

	blockchain=$(cat $SITE_ROOT/vars/BLOCKCHAIN)
	if [ -z "$blockchain" ]; then return $is_loading; fi

	network=$(cat $SITE_ROOT/vars/NETWORK)
	if [ -z "$network" ]; then return $is_loading; fi

	continent=$(cat $SITE_ROOT/vars/RAW | jq .geo.continentCode | sed 's/"//g')
	country=$(cat $SITE_ROOT/vars/RAW | jq .geo.countryCode | sed 's/"//g')

	if [ \( -z "$continent" \) -o \( "$continent" == "null" \) ]; then
		continent=""
		$SITE_ROOT/mbr node nodeinfo
	fi
	if [ \( -z "$country" \) -o \( "$country" == "null" \) ]; then
		country=""
		$SITE_ROOT/mbr node nodeinfo
	fi

	_update_network $blockchain $network $id $continent $country
	st=$?
	echo $st
	if [ $st -ne 0 ]; then
		is_loading=1
	fi

	sed "s/__GATEWAY_ID__/$id/g" etc/gateway0.conf >http.d/gateway.conf0
	sed -i "s/__BLOCKCHAIN__/$blockchain/g" http.d/gateway.conf0
	sed -i "s/__NETWORK__/$network/g" http.d/gateway.conf0
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/gateway.conf0

	sed "s/__GATEWAY_ID__/$id/g" etc/gateway9.conf >http.d/gateway.conf9
	sed -i "s/__BLOCKCHAIN__/$blockchain/g" http.d/gateway.conf9
	sed -i "s/__NETWORK__/$network/g" http.d/gateway.conf9
	sed -i "s/__DOMAIN__/$DOMAIN/g" http.d/gateway.conf9

	blnet=${blockchain}-${network}
	conf=http.d/gw-${blnet}

	_l0="${blockchain}-${network}\\."
	_conf1=http.d/gateway.conf9
	if [ \( -n "$continent" \) -a \( -n "$country" \) ]; then
		_l="${blockchain}-${network}-${continent}-${country}\\."
		grep $_l ${conf}-upstreams.conf >/dev/null
		if [ $? -eq 0 ]; then
			sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $_conf1
		else
			_l="${blockchain}-${network}-${continent}-${country}-v1-v2\\."
			grep $_l ${conf}-upstreams.conf >/dev/null
			if [ $? -eq 0 ]; then
				sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $_conf1
			else
				_l="${blockchain}-${network}-${continent}\\."
				grep $_l ${conf}-upstreams.conf >/dev/null
				if [ $? -eq 0 ]; then
					sed "s/proxy_pass http\:\/\/${_l0}node\.mbr/proxy_pass http\:\/\/${_l}node\.mbr/g" -i $_conf1
				fi
			fi

		fi

		# sed "s/proxy_pass http\:\/\/${blockchain}-${network}\.node\.mbr/proxy_pass http\:\/\/${blockchain}-${network}-${continent}-${country}\.node\.mbr/g" -i http.d/gateway.conf9
	fi

	$SITE_ROOT/cmd_server start all
	return $is_loading
}

_update_repos() {
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_update() {
	echo "Update"

	mkdir -p $SITE_ROOT/logs/access $SITE_ROOT/logs/error

	_st_update=0

	_update_repos
	_st_update=$?

	_load_config

	_st=$?

	if [ $_st_update -eq 0 ]; then
		_st_update=$_st
	fi

	return $_st_update
}

_monitor() {
	echo gateway >vars/TYPE
	_update
	_st_monitor=$?
	if [ $_st_monitor -ne 0 ]; then
		$0 _reload
	fi
	# cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	# supervisorctl update
	echo $(date +%s) >/tmp/mbr_monitor_updated
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
